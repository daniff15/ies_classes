#GroupId, artifactId and naming convention
groupId uniquely identifies your project across all projects. A group ID should follow Java's package name rules. This means it starts with a reversed domain name you control.
Maven does not enforce this rule. There are many legacy projects that do not follow this convention and instead use single word group IDs. However, it will be difficult to get a new single word group ID approved for inclusion in the Maven Central repository.
You can create as many subgroups as you want. A good way to determine the granularity of the groupId is to use the project structure. That is, if the current project is a multiple module project, it should append a new identifier to the parent's groupId. For example,
org.apache.maven, org.apache.maven.plugins, org.apache.maven.reporting

artifactId is the name of the jar without version. If you created it, then you can choose whatever name you want with lowercase letters and no strange symbols. If it's a third party jar, you have to take the name of the jar as it's distributed.
eg. maven, commons-math

#See maven version
$ mvn --version

#Create a Maven project
$ mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart 
-DarchetypeVersion=1.4 -DinteractiveMode=false 

Note: “-D” switch is used to define/pass a property to Maven in CLI.    

#Compile, get dependencies and makes the jar
$ mvn package

#Execute
$ mvn exec:java -Dexec.mainClass="com.mycompany.MainClass"

#Execute but passing parameters in the command line
$ mvn exec:java -Dexec.mainClass="com.mycompany.MainClass" -Dexec.args="arg0 arg1 arg2"

#Dependencies
We need to put dependencies in the POM file so that our program can make use of the extras that we want to use

#What is Maven archetype?
In short, Archetype is a Maven project templating toolkit.
An archetype is defined as an original pattern or model from which all other things of the same kind are made. The name fits as we are trying to provide a system that provides a consistent means of generating Maven projects. 
Archetype will help authors create Maven project templates for users, and provides users with the means to generate parameterized versions of those project templates.

Retrofit and Gson. Google’s Gson is a Java library that can be used to convert Java Objects into their JSON representation; 
Square’s Retrofit is a type-safe HTTP client for Java, that allows mapping an external REST API into a local (Java) interface.

#Git commands through terminal
$ git init                                                      #initialize a local git repo in this folder
$ git remote add origin <REMOTE_URL>                            #must adapt the url for your repo
$ git add .                                                     #mark all existing changes in this root to be commited
$ git commit -m "Initial project setup for exercise 1_3"        #create the commit snapshot locally
$ git push -u origin main                                       #uploads the local commit to the shared repo


#Maven Goal
Each phase is a sequence of goals, and each goal is responsible for a specific task.
When we run a phase – all goals bound to this phase are executed in order.
Here are some of the phases and default goals bound to them:
- compiler:compile – the compile goal from the compiler plugin is bound to the compile phase
- compiler:testCompile is bound to the test-compile phase
- surefire:test is bound to test phase
- install:install is bound to install phase
- jar:jar and war:war is bound to package phase

#Maven lifecicle
There are three built-in life cycles:
- default: the main life cycle as it's responsible for project deployment
- clean: to clean the project and remove all files generated by the previous build
- site: to create the project's site documentation

#Maven phase
A Maven phase represents a stage in the Maven build lifecycle   
validate: check if all information necessary for the build is available
- compile: compile the source code
- test-compile: compile the test source code
- test: run unit tests
- package: package compiled source code into the distributable format (jar, war, …)
- integration-test: process and deploy the package if needed to run integration tests
- install: install the package to a local repository
- deploy: copy the package to the remote repository

#Maven Plugin 
A Maven plugin is a group of goals.However, these goals aren't necessarily all bound to the same phase.


#Docker

Phases so docker to work:
To generate this message(hello-world), Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

$ docker run -d -p 80:80 docker/getting-started
-d - run the container in detached mode (in the background)
-p 80:80 - map port 80 of the host to port 80 in the container
docker/getting-started - the image to use
Tip: Could also be used as "-dp" instead of "-d -p"

$ docker build -t getting-started .

This command used the Dockerfile to build a new container image. You might have noticed that a lot of “layers” were downloaded. This is because we instructed the builder that we wanted to start from the node:12-alpine image. But, since we didn’t have that on our machine, that image needed to be downloaded.
After the image was downloaded, we copied in our application and used yarn to install our application’s dependencies. The CMD directive specifies the default command to run when starting a container from this image.
Finally, the -t flag tags our image. Think of this simply as a human-readable name for the final image. Since we named the image getting-started, we can refer to that image when we run a container.
The . at the end of the docker build command tells that Docker should look for the Dockerfile in the current directory.

